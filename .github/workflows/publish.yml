name: Tag

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Tag & Release
    runs-on: ubuntu-latest
    steps:
        # Checkout the updated source code
      - uses: actions/checkout@v2
      
        # If the version has changed, create a new git tag for it.
      - name: Tag
        id: autotagger
        uses: butlerlogic/action-autotag@stable
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
        # The remaining steps all depend on whether or  not
        # a new tag was created. There is no need to release/publish 
        # updates until the code base is in a releaseable state.

        # Create a github release
        # This will create a snapshot of the module,
        # available in the "Releases" section on Github.
      - name: Release
        id: release
        if: steps.autotagger.outputs.tagcreated == 'yes'
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.autotagger.outputs.tagname }}
          release_name: ${{ steps.autotagger.outputs.tagname }}
          body: ${{ steps.autotagger.outputs.tagmessage }}
          draft: false
          prerelease: ${{ steps.autotagger.outputs.prerelease == 'yes' }}

      - name: Build Release Artifacts
        if: success() && steps.autotagger.outputs.tagcreated == 'yes'
        id: build
        run: |
          cd ./build && npm install && cd ../
          npm run build --if-present
          for d in .dist/*/*/ ; do tar -cvzf ${d%%/}-x.x.x.tar.gz ${d%%}*; done;
    
      - name: Upload Release Artifacts
        if: success() && steps.autotagger.outputs.tagcreated == 'yes'
        uses: AButler/upload-release-assets@v2.0
        with:
          files: './.dist/**/*.tar.gz'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

        # Use this action to publish a single module to npm.
      - name: Publish
        id: publish
        if: success() && steps.autotagger.outputs.tagcreated == 'yes'
        uses: author/action-publish@stable
        with:
          scan: "./dist/browser, ./dist/node"
        env:
          REGISTRY_TOKEN: "${{ secrets.NPM_TOKEN }}"

        # If the publish fails, rollback the release
      - name: Rollback
        if: failure() && steps.autotagger.outputs.tagcreated == 'yes'
        uses: author/action-rollback@stable
        with:
          release_id: ${{ steps.release.id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}